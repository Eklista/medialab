version: '3.8'

# Multi-frontend architecture with WordPress headless CMS and FastAPI
# Architecture: WordPress (/) + React apps (/portal, /dashboard, /god-mode) + FastAPI (/api)
# Each frontend is independent and can be deployed/scaled separately

services:
  # PostgreSQL Database - Required for FastAPI backend
  postgres:
    image: postgres:15-alpine
    container_name: postgres_db
    restart: unless-stopped
    environment:
      POSTGRES_USER: medialab_user
      POSTGRES_PASSWORD: medialab_secure_password
      POSTGRES_DB: medialab_db
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d:ro
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U medialab_user -d medialab_db"]
      interval: 30s
      timeout: 10s
      retries: 3
    ports:
      - "5433:5432"  # For development access (avoiding conflict with local postgres)

  # Redis Cache - Used by FastAPI for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: redis_cache
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass redis_secure_password
    volumes:
      - redis_data:/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    ports:
      - "6379:6379"  # For development access

  # WordPress Headless CMS - Serves main site content via REST API
  # Only depends on external database, fully independent service
  wordpress:
    image: wordpress:latest
    container_name: wordpress_cms
    restart: unless-stopped
    env_file:
      - ./cms-wordpress/.env
    environment:
      # Override specific settings from root .env if needed
      WORDPRESS_CONFIG_EXTRA: |
        define('WP_DEBUG', ${WP_DEBUG:-false});
        define('WP_DEBUG_LOG', ${WP_DEBUG_LOG:-false});
    volumes:
      - ./cms-wordpress:/var/www/html
      - wp_uploads:/var/www/html/wp-content/uploads
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/wp-admin/admin-ajax.php"]
      interval: 30s
      timeout: 10s
      retries: 3

  # FastAPI Backend - Independent service for business logic
  # Can use its own database or external services
  # No hard dependencies to allow independent scaling
  api:
    build: 
      context: ./backend-api
      dockerfile: Dockerfile
      target: ${DOCKER_TARGET}
    container_name: fastapi_backend
    restart: unless-stopped
    env_file:
      - ./backend-api/.env
    # Expose API port only in development for Swagger UI and debugging
    ports:
      - "${API_EXPOSE_PORT:-}:8000"
    volumes:
      - ./backend-api:/app
      # Exclude node_modules and cache for performance
      - api_cache:/app/.cache
    networks:
      - app-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # React Portal Frontend - Client-facing application
  # Depends on dashboard for authentication/user management
  # Will show maintenance page if dashboard is down
  frontend-portal:
    build: 
      context: ./frontend-portal
      dockerfile: Dockerfile
      target: ${DOCKER_TARGET}
    container_name: react_portal
    restart: unless-stopped
    env_file:
      - ./frontend-portal/.env
    environment:
      # Override URLs from root orchestration config
      - VITE_API_URL=${API_PUBLIC_URL}
      - VITE_WP_URL=${WORDPRESS_PUBLIC_URL}/wp-json/wp/v2
    volumes:
      - ./frontend-portal:/app
      - /app/node_modules  # Anonymous volume for node_modules
    networks:
      - app-network
    depends_on:
      frontend-dashboard:
        condition: service_healthy
      api:
        condition: service_healthy

  # React Dashboard Frontend - Main admin interface
  # Core service that manages users, content, and system configuration
  # Portal and god-mode depend on this service being available
  frontend-dashboard:
    build: 
      context: ./frontend-dashboard
      dockerfile: Dockerfile
      target: ${DOCKER_TARGET}
    container_name: react_dashboard
    restart: unless-stopped
    env_file:
      - ./frontend-dashboard/.env
    environment:
      # Override URLs from root orchestration config
      - VITE_API_URL=${API_PUBLIC_URL}
      - VITE_WP_URL=${WORDPRESS_PUBLIC_URL}/wp-json/wp/v2
      - VITE_WP_ADMIN_URL=${WORDPRESS_PUBLIC_URL}/wp-admin
    volumes:
      - ./frontend-dashboard:/app
      - /app/node_modules
    networks:
      - app-network
    depends_on:
      api:
        condition: service_healthy
      wordpress:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # React God Mode Frontend - Super admin interface
  # Advanced configuration and system management
  # Only accessible to super administrators
  frontend-godmode:
    build: 
      context: ./frontend-godmode
      dockerfile: Dockerfile
      target: ${DOCKER_TARGET}
    container_name: react_godmode
    restart: unless-stopped
    env_file:
      - ./frontend-godmode/.env
    environment:
      # Override URLs from root orchestration config
      - VITE_API_URL=${API_PUBLIC_URL}
      - VITE_WP_URL=${WORDPRESS_PUBLIC_URL}/wp-json/wp/v2
      - VITE_MONITORING_URL=${API_PUBLIC_URL}/monitoring
      - VITE_LOGS_URL=${API_PUBLIC_URL}/logs
    volumes:
      - ./frontend-godmode:/app
      - /app/node_modules
    networks:
      - app-network
    depends_on:
      frontend-dashboard:
        condition: service_healthy

  # Nginx Reverse Proxy - Routes traffic to appropriate services
  # Minimal dependencies to ensure main site (WordPress) always works
  # Handles fallbacks and maintenance pages for failed services
  nginx:
    image: nginx:alpine
    container_name: nginx_proxy
    restart: unless-stopped
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/sites-available:/etc/nginx/sites-available:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      # Static files for maintenance pages
      - ./nginx/static:/usr/share/nginx/html:ro
    depends_on:
      wordpress:
        condition: service_healthy
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

# Named volumes for persistent data
# Note: Database should be managed externally for production safety
volumes:
  postgres_data:    # PostgreSQL database files
  redis_data:       # Redis persistence data
  wp_uploads:       # WordPress media files
  api_cache:        # FastAPI cache and temporary files

# Custom network for service communication
networks:
  app-network:
    driver: bridge
    # Enable IPv6 if needed
    enable_ipv6: false